version: 2.1
commands:
  bazel_install:
    steps:
      - run:
          name: Bazel - Install
          command: |
            curl -OL https://github.com/bazelbuild/bazel/releases/download/0.25.2/bazel-0.25.2-installer-linux-x86_64.sh
            chmod +x bazel-0.25.2-installer-linux-x86_64.sh
            sudo ./bazel-0.25.2-installer-linux-x86_64.sh

  run-grakn-server:
    steps:
      - bazel_install
      - run: bazel build @graknlabs_grakn_core//:assemble-linux-targz
      - run: mkdir dist && tar -xvzf bazel-genfiles/external/graknlabs_grakn_core/grakn-core-all-linux.tar.gz -C ./dist/
      - run: nohup ./dist/grakn-core-all-linux/grakn server start

jobs:
  build:
    docker:
      - image: circleci/python:3.6.3
    working_directory: ~/kglib
    steps:
      - checkout
      - bazel_install
      - run: bazel build //...

  test:
    docker:
      - image: circleci/python:3.6.3
    working_directory: ~/kglib
    steps:
      - checkout
      - bazel_install
      - run: bazel test //kglib/... --test_output=streamed --spawn_strategy=standalone --python_version PY3 --python_path $(which python)

  deploy-pip-snapshot:
    docker:
      - image: circleci/python:3.6.3
    working_directory: ~/kglib
    steps:
      - checkout
      - bazel_install
      - run: |
          echo -n "$(cat VERSION)-$CIRCLE_SHA1" > VERSION
          export DEPLOY_PIP_USERNAME=$REPO_GRAKN_USERNAME
          export DEPLOY_PIP_PASSWORD=$REPO_GRAKN_PASSWORD
          bazel run //:deploy-pip -- snapshot

  test-deployment-pip:
      docker:
        - image: circleci/python:3.6.3
      working_directory: ~/kglib
      steps:
        - checkout
        - run-grakn-server
        - run:
            name: Run test-deployment-pip for kglib
            command: |
              echo -n "$(cat VERSION)-$CIRCLE_SHA1" > VERSION
              sed -i -e "s/KGLIB_VERSION_MARKER/$(cat VERSION)/g" tests/deployment/requirements.txt
              cat tests/deployment/requirements.txt
              pip install -r tests/deployment/requirements.txt
              ./dist/grakn-core-all-linux/grakn console -k diagnosis -f kglib/utils/grakn/synthetic/examples/diagnosis/schema.gql
              python -m unittest kglib.kgcn.examples.diagnosis.diagnosis_end_to_end_test

  release-approval:
    docker:
      - image: circleci/python:3.6.3
    working_directory: ~/kglib
    steps:
      - checkout
      - bazel_install
      - run: |
          export RELEASE_APPROVAL_USERNAME=$REPO_GITHUB_USERNAME
          export RELEASE_APPROVAL_TOKEN=$REPO_GITHUB_TOKEN
          bazel run @graknlabs_build_tools//ci:release-approval

  deploy-github:
    docker:
      - image: circleci/python:3.6.3
    working_directory: ~/kglib
    steps:
      - checkout
      - run: wget https://github.com/tcnksm/ghr/releases/download/v0.12.0/ghr_v0.12.0_linux_386.tar.gz
      - run: tar xvf ghr_v0.12.0_linux_386.tar.gz
      - run:
         name: "Publish Draft Release on GitHub"
         command: |
           VERSION_TAG="v"$(cat "VERSION")
           curl -X POST --fail --data "{\"tag_name\": \"${VERSION_TAG}\",\"target_commitish\": \"${CIRCLE_SHA1}\",\"name\": \"Draft\",\"body\": \"\",\"draft\": true,\"prerelease\": false}" https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/releases?access_token=${GITHUB_DEPLOYMENT_TOKEN}

  deploy-pip-release:
    docker:
      - image: circleci/python:3.6.3
    working_directory: ~/kglib
    steps:
      - checkout
      - bazel_install
      - run: |
          export DEPLOY_PIP_USERNAME=$REPO_PYPI_USERNAME
          export DEPLOY_PIP_PASSWORD=$REPO_PYPI_PASSWORD
          bazel run //:deploy-pip -- release

  release-cleanup:
    docker:
      - image: circleci/python:3.6.3
    steps:
      - checkout
      - run: git push --delete origin kglib-release-branch

workflows:
  version: 2
  kglib:
    jobs:
      - test:
          filters:
            branches:
              ignore: kglib-release-branch
      - build:
          filters:
            branches:
              ignore: kglib-release-branch
      - deploy-pip-snapshot:
          filters:
            branches:
              only: master
          requires:
            - test
            - build
      - test-deployment-pip:
          filters:
            branches:
              only: master
          requires:
            - deploy-pip-snapshot
      - release-approval:
          filters:
            branches:
              only: master
          requires:
            - test-deployment-pip

  kglib-release:
    jobs:
      - deploy-github:
          filters:
            branches:
              only: kglib-release-branch
      - deploy-approval:
          type: approval
          filters:
            branches:
              only: kglib-release-branch
          requires:
            - deploy-github
      - deploy-pip-release:
          filters:
            branches:
              only: kglib-release-branch
          requires:
            - deploy-approval
      - release-cleanup:
          filters:
            branches:
              only: kglib-release-branch
          requires:
            - deploy-pip-release