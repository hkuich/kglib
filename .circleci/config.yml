version: 2.1
commands:

  install-bazel-linux-rbe:
    steps:
      - run: curl -OL https://raw.githubusercontent.com/graknlabs/build-tools/master/ci/install-bazel-linux.sh
      - run: bash ./install-bazel-linux.sh && rm ./install-bazel-linux.sh
      - run: curl -OL https://raw.githubusercontent.com/graknlabs/build-tools/master/ci/install-bazel-rbe.sh
      - run: bash ./install-bazel-rbe.sh && rm ./install-bazel-rbe.sh

  run-grakn-server:
    steps:
      - install-bazel-linux-rbe
      - run: bazel build @graknlabs_grakn_core//:assemble-linux-targz
      - run: mkdir dist && tar -xvzf bazel-genfiles/external/graknlabs_grakn_core/grakn-core-all-linux.tar.gz -C ./dist/
      - run: nohup ./dist/grakn-core-all-linux/grakn server start

  install-python:
    steps:
      - run: pyenv install 3.6.3
      - run: pyenv global 3.6.3

jobs:
  build:
    machine: true
    working_directory: ~/kglib
    steps:
      - install-bazel-linux-rbe
      - checkout
      - install-python
      - run: bazel build //...

  test:
    machine: true
    working_directory: ~/kglib
    steps:
      - install-bazel-linux-rbe
      - checkout
      - install-python
      - run: bazel test //kglib/... --test_output=streamed --spawn_strategy=standalone --python_version PY3 --python_path $(which python)

  test-end-to-end:
    machine: true
    working_directory: ~/kglib
    steps:
      - install-bazel-linux-rbe
      - checkout
      - install-python
      - run: bazel test //tests/end_to_end/... --test_output=streamed --spawn_strategy=standalone --python_version PY3 --python_path $(which python)

  test-markdown-link-health:
    machine: true
    working_directory: ~/kglib
    steps:
      - checkout
      - run: find . -name \*.md | xargs -L1 npx markdown-link-check -v

  deploy-pip-snapshot:
    machine: true
    working_directory: ~/kglib
    steps:
      - install-bazel-linux-rbe
      - checkout
      - install-python
      - run: |
          echo -n "$(cat VERSION)-$CIRCLE_SHA1" > VERSION
          export DEPLOY_PIP_USERNAME=$REPO_GRAKN_USERNAME
          export DEPLOY_PIP_PASSWORD=$REPO_GRAKN_PASSWORD
          bazel run //:deploy-pip -- snapshot

  test-deployment-pip:
      machine: true
      working_directory: ~/kglib
      steps:
        - checkout
        - install-python
        - run-grakn-server
        - run:
            name: Run test-deployment-pip for kglib
            command: |
              echo -n "$(cat VERSION)-$CIRCLE_SHA1" > VERSION
              sed -i -e "s/KGLIB_VERSION_MARKER/$(cat VERSION)/g" tests/deployment/requirements.txt
              cat tests/deployment/requirements.txt
              pip install -r tests/deployment/requirements.txt
              ./dist/grakn-core-all-linux/grakn console -k diagnosis -f kglib/utils/grakn/synthetic/examples/diagnosis/schema.gql
              cd tests/deployment/ && python -m unittest kgcn.diagnosis

  release-approval:
    machine: true
    working_directory: ~/kglib
    steps:
      - install-bazel-linux-rbe
      - checkout
      - install-python
      - run: |
          export RELEASE_APPROVAL_USERNAME=$REPO_GITHUB_USERNAME
          export RELEASE_APPROVAL_TOKEN=$REPO_GITHUB_TOKEN
          bazel run @graknlabs_build_tools//ci:release-approval

  release-validate:
    machine: true
    steps:
      - install-bazel-linux-rbe
      - checkout
      - install-python
      - run: |
          bazel run @graknlabs_build_tools//ci:release-validate-deps -- \
            graknlabs_grakn_core graknlabs_client_python

  deploy-github:
    machine: true
    working_directory: ~/kglib
    steps:
      - checkout
      - run: wget https://github.com/tcnksm/ghr/releases/download/v0.12.0/ghr_v0.12.0_linux_386.tar.gz
      - run: tar xvf ghr_v0.12.0_linux_386.tar.gz
      - run:
         name: "Publish Draft Release on GitHub"
         command: |
           VERSION_TAG=$(cat "VERSION")
           curl -X POST --fail --data "{\"tag_name\": \"${VERSION_TAG}\",\"target_commitish\": \"${CIRCLE_SHA1}\",
           \"name\": \"KGLIB ${VERSION_TAG}\",\"body\": \"\",\"draft\": true,\"prerelease\": false}" https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/releases?access_token=${GITHUB_DEPLOYMENT_TOKEN}

  deploy-pip-release:
    machine: true
    working_directory: ~/kglib
    steps:
      - install-bazel-linux-rbe
      - checkout
      - install-python
      - run: |
          export DEPLOY_PIP_USERNAME=$REPO_PYPI_USERNAME
          export DEPLOY_PIP_PASSWORD=$REPO_PYPI_PASSWORD
          bazel run //:deploy-pip -- release

  release-cleanup:
    machine: true
    steps:
      - checkout
      - run: git push --delete https://$REPO_GITHUB_TOKEN@github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME $CIRCLE_BRANCH

workflows:
  version: 2
  kglib:
    jobs:
      - test:
          filters:
            branches:
              ignore: kglib-release-branch
      - build:
          filters:
            branches:
              ignore: kglib-release-branch
      - test-end-to-end:
          filters:
            branches:
              ignore: kglib-release-branch
      - test-markdown-link-health:
          filters:
            branches:
              ignore: kglib-release-branch
      - deploy-pip-snapshot:
          filters:
            branches:
              only: master
          requires:
            - test
            - test-end-to-end
            - build
            - test-markdown-link-health
      - test-deployment-pip:
          filters:
            branches:
              only: master
          requires:
            - deploy-pip-snapshot
      - release-approval:
          filters:
            branches:
              only: master
          requires:
            - test-deployment-pip

  kglib-release:
    jobs:
      - release-validate:
          filters:
            branches:
              only: kglib-release-branch
      - deploy-github:
          filters:
            branches:
              only: kglib-release-branch
          requires:
            - release-validate
      - deploy-approval:
          type: approval
          filters:
            branches:
              only: kglib-release-branch
          requires:
            - deploy-github
      - deploy-pip-release:
          filters:
            branches:
              only: kglib-release-branch
          requires:
            - deploy-approval
      - release-cleanup:
          filters:
            branches:
              only: kglib-release-branch
          requires:
            - deploy-pip-release
